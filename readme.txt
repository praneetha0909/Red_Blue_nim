LANGUAGE USED:  	Python - 3.12.2
EDITOR:			Miscrosoft Visual Studio
EXAMPLE COMMANDS: 	python red_blue_nim.py 3 3 standard computer 
			python red_blue_nim.py 3 5 misere computer
			python red_blue_nim.py 3 3 standard human
			python red_blue_nim.py 8 7 misere human
PREREQUISITES:		Python - 3.12.2 should be added to Environment Variables during the installation process.

FILES IN FOLDER: 
1. red_blue_nim.py - Python Source File
2. readme.txt (which also includes Evaluation Function implementation description)

*INSTRUCTIONS*
To run the code, 
1. Download the submission file 'file_name.zip' from Canvas for Assignment 2.
2. Unzip the folder. 
3. Open the python file 'red_blue_nim' in Microsoft Visual Studio.
4. Open View --> Terminal in Visual Studio
5. Copy the path of the python file, where it is location. Example: "C:\Users\prane\OneDrive\Documents\AI\fime_name"
6. Enter: "cd C:\Users\prane\OneDrive\Documents\AI\file_name" in the terminal. It will go the path of the file.
7. In the terminal, enter the commands to start the game play, example command line "python red_blue_nim.py <num-red> <num-blue> <version> <first-player>". Here red_blue_nim.py is the name of the python file, '6' - Number of red marbles, '4' - number of blue marbles, 'version' - standard/misere, 'first player' - computer/human. By entering these, game will start.

*OBSERVATIONS*
1. Based on the selected inputs, the game will proceed and ends once either of the marbles are emptied.
2. During computer turn, it follows the specified order:(for standard)
	Pick 2 red marble
	Pick 2 blue marble
	Pick 1 red marble
	Pick 1 blue marble (For Misere version, it is the inverted order)
and makes the best possible move using Minmax with Alpha-Beta pruning. 
3. Suppose (In Standard version), if there are 2 Red marbles, 2 Blue marbles, first it calculates the scores for all the possible moves, if 2 Red marbles are removes it has score 2*3 = 6, if 2 Blue marbles are removed, score is 2*2 = 4, if 1 Red marble is removed, score is 1*2+2*3=8, if 1 blue marble is removed, score is 2*2+1*3 = 7. Here, if computer removes 1 Red marbles as score is high, and based on Minmax alpha beta pruning best move of 1 removing 1 Red marble is picked. So based on next player move, computer calculates the same and picks the marble.
4. In Misere verion, if there are 1 Red marble, and 1 Blue marble, it has only 2 possible moves, either remove 1 Red marble, score is 3, either remove 1 Blue marble, score is 2. It picks removing 1 red marble as score is high. If, there are two moves with same score, then computer will select the move based on the specified order given in standard/misere.
This is how decision making is done using the MinMax-Alpha Beta pruning.
5. In'standard' version, player loses the game, if either pile empty on their side. In 'misere' version, player wins the game, if either pile empty on their turn, which makes the other person lose.
6. Final score is calculated and the winner is announced.
Base scoring rule: 2 * Number of remaining red marbles + 3 * Number of remaining blue marbles 

**CODE STRUCTURE**
1. Game Initialisation: the game starts with number of red and blue marbles, where version (standard or misere), and first player(computer or human) as input parameters. 
Default version - 'standard'. Default first player - 'computer'.
2. Loop of Game: Turns between the players(human/computer) are switched till the game ends. This occurs till red/blue marbles pile is emptied.
3. Execution of moves: On computer's turn, it uses the MinMax algorithm with alpha-beta pruning by comparing all the scores generated by possible moves, and selecting the best move based on best score.
4. User Interaction: On Human's turn, it prompts to choose a pile from which they want to remove the marbles, and how many of them. 
5. Game Evaluation: Final score is calculated by scoring rules for each verison of the game. Based on the version, winner is declared(according to given rules).
6. Decison Making strategy: It generates the possible moves depending on the current state of the game, which follows a specified order depending on the game version selected. It mainly evalutes the moves to maximize the computer's winning chance while it minimizes the chances of the opponent winning. Maximizing player is the segment where decison-making of the computer is implemented which seeks higher scores. When it is computer's turn it picks the maximum score based on evaluation function. In Minimizig player, algorithm will assume that human might pick move that might minimize computer's score. This can be observed where the goal is to select path which results in least favourable ending for computer, while minimizing the score for human player's available choices. Alpha-beta pruning cuts down the branches, which doesnt affect the final outcome, and reduces the computation needed for decision.

*'eval_function'* : 
a) Misere Version
Winning Condition: It states winnning occurs when pile emptied on their turn. 
Scoring Logic: Having fewer options(higher scores are due to negative impact of fewer moves left) which leads towards a state where aiming for final marble becomes the objective.  
b) Standard version
Winning Condition: Player will lose if they take the last marble.
Scoring Logic: It reflects a strategy of leaving as many marbles and movements open as possible, which makes it harder for the opponent.
*Main goal* is to, leave marbles for the opponent in 'standard' version, and pushing the game towards taking last/final marble in 'misere' version.

7. Input Validation: Incase, if user enters the input apart from red/blue or 1/2, it gives an error statement, stating to enter only those values, as it will not accept other values to proceed the game. 

This is how Red-Blue Nim game is structured. 
